# .github/workflows/ai-agent-deploy-gcp.yml

name: Deploy All Uplas AI Agents to Google Cloud Run

on:
  push:
    branches:
      - main # Or your primary deployment branch
    paths: # Trigger if any agent code, shared libs, or this workflow changes
      - 'personalized_tutor_nlp_llm/**'
      - 'tts_agent/**'
      - 'ttv_agent/**'
      - 'project_generator_agent/**'
      - 'shared_ai_libs/**'
      - '.github/workflows/ai-agent-deploy-gcp.yml'
  workflow_dispatch: # Allows manual triggering

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ARTIFACT_REGISTRY_REPOSITORY: 'uplas-ai-agents' # Your Artifact Registry repo name
  GCP_REGION: 'us-central1' # e.g., us-central1, europe-west1

jobs:
  build-and-deploy-agents:
    name: Build and Deploy ${{ matrix.agent.name }}
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    strategy:
      fail-fast: false # Allows other matrix jobs to continue if one fails
      matrix:
        agent:
          - name: 'personalized-tutor-nlp-llm'
            directory: 'personalized_tutor_nlp_llm'
            env_vars_config: | # Agent-specific environment variables
              GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
              GCP_LOCATION=${{ env.GCP_REGION }}
              LLM_MODEL_NAME=gemini-1.5-flash-001 # Or from secrets.TUTOR_LLM_MODEL
          - name: 'tts-agent'
            directory: 'tts_agent'
            env_vars_config: |
              GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
              TTS_AUDIO_GCS_BUCKET_NAME=${{ secrets.TTS_AUDIO_GCS_BUCKET_NAME }}
          - name: 'ttv-agent'
            directory: 'ttv_agent'
            env_vars_config: |
              GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
              TTV_GCS_BUCKET_NAME=${{ secrets.TTV_GCS_BUCKET_NAME }}
              DJANGO_TTV_CALLBACK_URL=${{ secrets.DJANGO_TTV_CALLBACK_URL }}
              AI_TUTOR_AGENT_URL=https://personalized-tutor-nlp-llm-${{ secrets.GCP_URL_SUFFIX }}.a.run.app # Example URL structure
              TTS_AGENT_URL=https://tts-agent-${{ secrets.GCP_URL_SUFFIX }}.a.run.app # Example URL structure
              THIRD_PARTY_AVATAR_API_KEY=${{ secrets.THIRD_PARTY_AVATAR_API_KEY }}
              THIRD_PARTY_AVATAR_BASE_URL=${{ secrets.THIRD_PARTY_AVATAR_BASE_URL }}
          - name: 'project-generator-agent'
            directory: 'project_generator_agent'
            env_vars_config: |
              GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
              GCP_LOCATION=${{ env.GCP_REGION }}
              PROJECT_LLM_MODEL_NAME=gemini-1.5-flash-001 # Or from secrets.PROJECT_LLM_MODEL
              ASSESSMENT_LLM_MODEL_NAME=gemini-1.5-flash-001 # Or from secrets.ASSESSMENT_LLM_MODEL
              AI_TUTOR_AGENT_URL=https://personalized-tutor-nlp-llm-${{ secrets.GCP_URL_SUFFIX }}.a.run.app # Example URL structure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image to Artifact Registry
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./${{ matrix.agent.directory }}/Dockerfile # Path to the agent's Dockerfile
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ matrix.agent.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Google Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ matrix.agent.name }}
          image: ${{ steps.build-image.outputs.digest }} # Use the pushed image digest
          region: ${{ env.GCP_REGION }}
          # allow_unauthenticated: true # Uncomment if public access is needed, otherwise IAM controls access
          env_vars: ${{ matrix.agent.env_vars_config }}
          # Add other Cloud Run configurations as needed:
          # memory: '512Mi'
          # cpu: 1
          # min_instances: 0 # for cost saving
          # max_instances: 3
          # concurrency: 80
          # service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL_FOR_RUNTIME }} # Optional: if different from deployer

      - name: Output Cloud Run Service URL
        run: echo "Deployed ${{ matrix.agent.name }} to ${{ steps.deploy.outputs.url }}"

