# .github/workflows/ai-agent-ci.yml

name: Uplas AI Agents CI

on:
  push:
    branches:
      - main
    paths: # Trigger if any Python code, requirements, or workflow files change
      - '**.py'
      - '**/requirements.txt'
      - '.github/workflows/ai-agent-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - '**.py'
      - '**/requirements.txt'
      - '.github/workflows/ai-agent-ci.yml'
  workflow_dispatch: # Allows manual triggering

jobs:
  lint-and-test:
    name: Lint and Test AI Agents
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"] # Specify your project's Python version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies and common dev tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pytest pytest-asyncio
          # Install dependencies for all agents and shared_ai_libs
          # This ensures all code can be linted and tested correctly.
          if [ -f "shared_ai_libs/requirements.txt" ]; then pip install -r shared_ai_libs/requirements.txt; fi
          if [ -f "personalized_tutor_nlp_llm/requirements.txt" ]; then pip install -r personalized_tutor_nlp_llm/requirements.txt; fi
          if [ -f "tts_agent/requirements.txt" ]; then pip install -r tts_agent/requirements.txt; fi
          if [ -f "ttv_agent/requirements.txt" ]; then pip install -r ttv_agent/requirements.txt; fi
          if [ -f "project_generator_agent/requirements.txt" ]; then pip install -r project_generator_agent/requirements.txt; fi
        # Note: Ensure that the PYTHONPATH allows imports between agents if tests rely on it,
        # or that tests mock out inter-agent calls effectively.
        # For CI, it's common to install all dependencies if tests are run from the root
        # or if linters need to understand the full environment.

      - name: Lint with Black (Check formatting)
        run: |
          black --check . --exclude ".*/migrations/.*" # Exclude migrations if any Django parts were here
        # To automatically format, you'd use 'black .' without --check, but CI usually just checks.

      - name: Lint with Flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pytest for all agents
        env: # Set mock/test environment variables needed by tests
          GCP_PROJECT_ID: "test-gcp-project-id-ci"
          GCP_LOCATION: "test-gcp-location-ci"
          LLM_MODEL_NAME: "test-gemini-model-ci"
          TTS_AUDIO_GCS_BUCKET_NAME: "test-uplas-tts-bucket-ci"
          TTV_GCS_BUCKET_NAME: "test-ttv-bucket-ci"
          DJANGO_TTV_CALLBACK_URL: "http://mock-django-ci/api/internal/ttv-callback/"
          AI_TUTOR_AGENT_URL: "http://mock-ai-tutor-agent-ci"
          TTS_AGENT_URL: "http://mock-tts-agent-ci"
          THIRD_PARTY_AVATAR_API_KEY: "mock_avatar_api_key_ci"
          THIRD_PARTY_AVATAR_BASE_URL: "http://mock-avatar-service-ci.com/api"
          PROJECT_LLM_MODEL_NAME: "test-project-gemini-model-ci"
          ASSESSMENT_LLM_MODEL_NAME: "test-assessment-gemini-model-ci"
          # Add any other ENV VARS your tests might implicitly rely on, even if mocked in code.
        run: |
          # Run pytest from the root. Pytest should discover tests in subdirectories.
          # Ensure your PYTHONPATH is set up correctly if tests have cross-directory imports
          # or adjust the command to run tests within each agent's directory.
          # For simplicity, running from root and letting pytest discover.
          PYTHONPATH=. pytest
          # Alternatively, run for each agent if they are fully independent for testing:
          # pytest personalized_tutor_nlp_llm/
          # pytest tts_agent/
          # pytest ttv_agent/
          # pytest project_generator_agent/

